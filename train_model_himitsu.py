"""
from keras.optimizers import SGD
from sklearn.model_selection import train_test_split
"""
import os
import random



"""データの読み込み"""

#全単語データの読み込み（リスト型）
all_word_list = ["悪運ダイヤ","悪魔のパスポート","アソボウ","穴ほり機","アパートごっこの木",
			"アベコンベ","あべこべクリーム","アヤカリン","あらかじめアンテナ","あらかじめ日記",
			"アラビンのランプ","アンキパン","石ころぼうし","いたずらオモチャ化機","いつでも日記",
			"イマニ目玉","インスタントミニチュア製造カメラ","インスタント旅行カメラ","ウソ８００",
			"うそつ機","うそつきかがみ","うそ発見器","打ち上げ式豆太陽","うちでの小づち",
			"うつつまくら","ウマタケ","ウラオモテックス","ウマシマキャンデー","ウルトラミキサー",
			"ウルトラ・スペシャルマイティ・ストロングスーパーよろい","衛星テレビ","エコー衛星",
			"E・S・P訓練ボックス","エスパーぼうし","XYZ線カメラ","N・Sワッペン","エラ・チューブ",
			"エースキャップ","お医者さんカバン","おざしきゲレンデ","おしかけ電話","おせじ口べに・悪口べに",
			"おそだアメ","オトコンナ","おねしょじゃ口","おはなしバッジ","おもちゃの兵隊","音楽イモ",
			"オールマイティーバス","快足シューズ","怪談ランプ","海底バイキングセット","カクミサイル発射衛星",
			"かくれマント","かげきりばさみ","かげとりもち","かぜうつし機","家族合わせケース","カッコータマゴ",
			"かならずあたる手相セット","かならず実現する予定メモ帳","カネバチ","ガリバートンネル","記憶映写とんかち",
			"きこりの泉","気象衛星","ギシンアンキ","きせかえカメラ","キューピッドのや","驚時機（きょうじき）",
			"強力岩トカシ","クイックとスロー","空気ピストル","空気砲","くすぐりノミ","くせなおしガス",
			"組み立て円盤セット","雲がためガス","暗くなる電球","グルメテーブルかけ","くろうみそ",
			"月光とう","けむりのロボット","ゲラゲライヤホン","こいのぼりそうじゅうき","声のキャンデー",
			"ごきげんメーター","ここほれワイヤー","小人ばこ","コベアベ","ゴルゴンの道","ころばし屋",
			"コンク・フード","コンピューターペンシル","さいなん報知器","細胞縮小き","３０分できく毛はえぐすり",
			"自家用衛星","時間カメラ","ジキルハイド","実景プラネタリウム","室内旅行機","シナリオライター",
			"シネラマン","シャーロック・ホームズ・セット","重力ペンキ","しゅみの日曜農業セット",
			"瞬間移動潜水艦","正直太郎","深海クリーム","深海ヘッドランプ","進化退化放射線源",
			"人生やりなおし機","ジーンマイク","水圧銃","推理ぼう","スケジュールどけい","スケスケ望遠鏡",
			"スナオン","ズバリパイプ","スパイセット","スペアポケット","スモールライト","刷りこみタマゴ","スリルブーメラン",
			"スロー","スーパーダンのふろしき","スーパー手ぶくろ","正かくグラフ","声紋キャンディー製造機","せん水艦",
			"せん風機","ソウナルじょう","そっくりクレヨン","ソノウソホント","台風のたまご","タイムカメラ",
			"タイムシーバー","タイムテレビ","タイムフロシキ","タイムマシン","ダイリガム","タケコプター",
			"だっしゅうざい","タヌ機","断層ビジョン","たんぼロール","地球セット","地球はかいばくだん",
			"地底探検車","チューブ入り雲","つけかえ手ぶくろ","つけると暗くなる電球","続きスプレー","偵察衛星",
			"手がかりレンズ","テキオー灯","手ぶくろ電話","てるてるぼーず","テレパしい","天気調整マシン",
			"電子頭脳","電車ごっこ","デンデンハウス","とうしめがね","動物がたにげだしじょう","動物変身ビスケット",
			"動物ライト","とう明人間目ぐすり","とうめいペンキ","とうめいマント","通りぬけフープ",
			"どくさいスイッチ","トゲつき寝袋","どこでも大ほう","どこでもドア","トッカエ・バー",
			"トモダチロボット","ドラえもん","取り消しゴム","とりよせバッグ","ドリームマッチ","トレーサーバッジ",
			"どんな病気にもきくくすり","ニクメナイン","二十二世紀のマジックハンド","日曜農業セット",
			"日本一周大旅行ゲーム","人間あやつり機","人間機関車セット","人間製造機","人間切断機","寝ぶくろ",
			"眠くならない薬","のろいカメラ","バイバイン","ばっ金箱","バッジ製造カメラ","ハツラツン","反のうテストロボット",
			"万能わな","ひっこし地図","日づけ変更カレンダー","ヒトマネロボット","ひょうろんロボット","ヒラリマント",
			"ピーヒョロロープ","風船いかだ","フエルミラー","フエール銀行","ふきとばし・せん風機","復元光線",
			"ブラックベルト","フルーツボート","フワフワオビ","フー子","ペコペコバッタ","ペット用魚えさ",
			"ヘッドランプ","へやこうかんスイッチ","ヘリトンボ","返事先どりポスト",
			"ポラロイドインスタントミニチュアせいぞうカメラ","ほんもの図鑑","ほんやくコンニャク","ポータブル国会",
			"ホームズセット","マグマ探知機","マジック・セメント","マッドウォッチ","ま水ストロー","○×うらない",
			"万病薬","見えなくなる目ぐすり","見たままスコープ","ミチビキエンゼル","虫の声の素","ムユウボウ",
			"ムリヤリトレパン","ムードもりあげ楽団","女神ロボット","目鼻ペン","めんくいカメラ","もぐら手ぶくろ",
			"もしもボックス","もちせいぞうマシン","もどりライト","桃太郎印のきびだんご","モモボート",
			"モンタージュバケツ","ヤカンレコーダー","友情カプセルとコントローラー","ゆうびんロケット","ゆっくり反射ぞうきん",
			"ゆめふうりん","ようろうおつまみ","四次元くずかご","四次元三輪車","四次元ポケット","予定メモ帳",
			"ラジコン宇宙人","ラッキーガン","立体映写機","流行性ネコシャクシビールス","ルームスイマー","レーダーステッキ",
			"ロケットそうじゅうくんれん機","ロボ子","Yロウ","わすれとんかち","わすれろ草"]




#辞書型に落とし込む：ベクトル表現
#word_vec;基盤となるひみつ道具辞書
word_vec = {}
for i, word in enumerate(all_word_list):

	word_vec[word] = i
	

#作成した辞書の表示	
#print(word_vec)
"""
valueからkeyを抽出する方法
for k,v in word_vec.items():
	if word_vec[k] == 0:
		print(k)

"""




"""学習用データの整形"""
#アンケートによって収集されたデータから知っている知識のみを収集





"""学習モデル構築"""


#パラメータの設定
epoch_num  = 50
batch_size = 100
in_num   = len(x_train[0])
hidden_1 = 100
hidden_2 = 100
out_num  = len(y_train[0])


#モデル構築,学習
model = Sequential()
model.add(Dense(input_dim = in_num, output_dim = hidden_1))
model.add(Activation("relu"))
model.add(Dropout(0.5))

model.add(Dense(output_dim = out_num))
model.add(Activation("sigmoid"))

model.compile(loss="binary_crossentropy", optimizer=SGD(lr=0.1), metrics=['accuracy'])
history = model.fit(x_train, y_train, nb_epoch = epoch_num, batch_size=batch_size,validation_data=(x_val, y_val))


#モデル評価
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

#テストデータと結果の表示
predictions = model.predict(x_test)
correct = y_test[:, np.newaxis]
print("x_test:")
print(x_test[0])
print("predictions:")
print(predictions[0])
print("correct:")
print(correct[0])



#モデルの保存
print("Saving Model...")
json_string = model.to_json()
open('predict_model.json', 'w').write(json_string)
print("Saved!")

#パラメータの保存
print("Saving Param...")
model.save_weights('predict_weights.h5')

gc.collect()



	


